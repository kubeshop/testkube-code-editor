/**
 * Register a marker data provider that can provide marker data for a model.
 *
 * @param monaco The Monaco editor module.
 * @param languageSelector The language id to register the provider for.
 * @param provider The provider that can provide marker data.
 * @returns A disposable.
 */
export function registerMarkerDataProvider(monaco, languageSelector, provider) {
    const listeners = new Map();
    const matchesLanguage = (model) => {
        if (languageSelector === '*') {
            return true;
        }
        const languageId = model.getLanguageId();
        return Array.isArray(languageSelector)
            ? languageSelector.includes(languageId)
            : languageSelector === languageId;
    };
    const doValidate = async (model) => {
        const markers = await provider.provideMarkerData(model);
        // The model have have been disposed by the time marker data has been fetched.
        if (!model.isDisposed() && matchesLanguage(model)) {
            monaco.editor.setModelMarkers(model, provider.owner, markers ?? []);
        }
    };
    const onModelAdd = (model) => {
        if (!matchesLanguage(model)) {
            return;
        }
        let handle;
        listeners.set(String(model.uri), model.onDidChangeContent(() => {
            clearTimeout(handle);
            handle = setTimeout(() => {
                doValidate(model);
            }, 500);
        }));
        doValidate(model);
    };
    const onModelRemoved = (model) => {
        monaco.editor.setModelMarkers(model, provider.owner, []);
        const uriStr = String(model.uri);
        const listener = listeners.get(uriStr);
        if (listener) {
            listener.dispose();
            listeners.delete(uriStr);
        }
    };
    const disposables = [
        monaco.editor.onDidCreateModel(onModelAdd),
        monaco.editor.onWillDisposeModel((model) => {
            onModelRemoved(model);
            provider.doReset?.(model);
        }),
        monaco.editor.onDidChangeModelLanguage((event) => {
            onModelRemoved(event.model);
            onModelAdd(event.model);
            provider.doReset?.(event.model);
        }),
    ];
    for (const model of monaco.editor.getModels()) {
        onModelAdd(model);
    }
    return {
        dispose() {
            for (const uri of listeners.keys()) {
                onModelRemoved(monaco.editor.getModel(monaco.Uri.parse(uri)));
            }
            while (disposables.length) {
                disposables.pop().dispose();
            }
        },
    };
}
